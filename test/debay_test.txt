import { BigNumber } from "ethers";

describe("Functional test 1", () => {

    it ("Should test all normal functions", async () => {

        let accounts: any[] = []
        const [addr0, addr1,addr2,addr3,addr4,addr5, addr6, addr7] = await ethers.getSigners();
        accounts.push(addr0, addr1, addr2, addr3, addr4, addr5, addr6, addr7)

        console.log("---------------------------------------------------------")

        const debay_instance = await ethers.getContractFactory("DeBay")
        const debay = await debay_instance.deploy()
        // getting instance of deployed contract
        await debay.deployed()
//    function startAuction(string calldata name, string calldata imgUrl, string calldata description, uint256 floor, uint256 deadline) external onlyNotPaused returns (bytes32) {
        await debay.togglePause()

        console.log('-------------------------------------')  
        // try send transactions while contract is paused
        try {
            
            await debay.connect(accounts[0]).startAuction('asd', 'asd', 'asd', 1, 2);

        }
        catch (error) {
            if (error instanceof Error) {
                console.log(error.stack);

            } else {
                console.log('Unexpected error', error);
              }
            // catch error and console log the stack data error

        }
        await debay.togglePause()

        // starting auction
        await debay.connect(accounts[0]).startAuction('asd', 'asd', 'asd', 900, 15);
        // getting auctionId via getAuctionId function
        var auctionId = await debay.getAuctionId(accounts[0].address, 1,'test1', 'asd', 'asd');
        // bidding and change the higher bidder
        try {
            await debay.connect(accounts[3]).bid(auctionId, { value:5000000})
            
            await debay.connect(accounts[4]).bid(auctionId, {value:6000000})

            debay.userfunds(accounts[3]).then((response:BigNumber) => console.log('Accounts 3 has: ', response.toString(), ' ethers available to bid'))

            let highest = await debay.see_highest_bidder(auctionId)
            let test = (highest === accounts[4].address)
            expect(test).to.equal(true)
            console.log('NEW HIGHER BIDDER:' , highest)
        } catch (e) {
            if (e instanceof Error) {
                console.log(e.stack)
            } 
        }

        // trying to withdraw money, if it's correct the money after withdraw should be more than before money
        accounts[0].getBalance().then((response:BigNumber) => console.log('Money before withdraw: ', response.toString()))

        try {
            await debay.connect(accounts[3]).withdraw()
        } catch (e) {
            if (e instanceof Error) {
                console.log(e.stack)
            } 
        }

        accounts[0].getBalance().then((response:BigNumber) => console.log('Money AFTER the withdraw of user funds: ', response.toString()))

        // try to settle auction
        try {
            await debay.settle(auctionId)
            debay.see_winner(auctionId).then((winner:any) => console.log('Winner: ', winner))

        } catch (e) {
            if (e instanceof Error) {
                console.log(e.stack)
            } 
        }

        try {
            // depositing money to contract
            await debay.connect(accounts[5]).deposit({value:ethers.util.formatEther(1)})
            const before_money = await accounts[5].getBalance()
            console.log(before_money.toString())

            // withdrawing money of the contract
            try {
                await debay.connect(accounts[5]).withdraw()
            } catch (e) {
                if (e instanceof Error) {
                    console.log(e.stack)
                } 
            }

            const after_money = await accounts[5].getBalance()
            
            // asserting after_money is equal to before_money plus 1 ether (the amount deposited)
            let result = parseInt(after_money) > parseInt(before_money);
            expect(result).to.be.true;

        } catch (error) {
            if (error instanceof Error) {
                console.log(error.stack)
            } 
        }

    })
})

describe("Trying to catch some errors", () => {
    it ("It should be catch pause error", async () => {
        
        let accounts: any[] = []
        const [addr0, addr1,addr2,addr3,addr4,addr5, addr6, addr7] = await ethers.getSigners();
        accounts.push(addr0, addr1, addr2, addr3, addr4, addr5, addr6, addr7)

        // creating new instance of the contract
        const debay_instance = await ethers.getContractFactory("DeBay")
        const debay = await debay_instance.deploy()
        // getting instance of deployed contract
        await debay.deployed()
        // starting an auction
        await debay.connect(accounts[0]).startAuction('test1', 'asd', 'asd', 1, 15);

        //pausing contract
        await debay.togglePause()

        // testing the pause mode, it should catch an error
        try {
            await debay.startAuction('test2', 'asd', 'asd', 1, 15);
        } catch (e) {
            if (e instanceof Error) {
                console.log(e.stack)
            } 
        }

        // toggle pause
        await debay.togglePause()

        // get auction id, of the previous auction created
    //     function getAuctionId(address initiator,uint256 deadline,string calldata name,string calldata imgUrl,string calldata description) public pure returns (bytes32) {

        let auctionId = await debay.getAuctionId(accounts[0].address, 1,'test1', 'asd', 'asd')

        // bidding to the auction
        await debay.connect(accounts[6])._bid(auctionId, {value:5000})
        // see if highest bidder is accounts[6]
        debay.see_highest_bidder(auctionId).then((highest_bidder:any) => {
             expect(highest_bidder).to.equal(accounts[6].address)
             console.log('The highest bidder is: ', highest_bidder) 
            })

        // try to bid less amount than price floor, it should catch an error
        try {
            await debay.connect(accounts[5]).bid(auctionId,  {value:2000})
        } catch (e) {
            if (e instanceof Error) {
                console.log(e.stack)
            } 
        }

    })
})