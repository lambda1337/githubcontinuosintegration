/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OnlineShopInterface extends ethers.utils.Interface {
  functions: {
    "SKU()": FunctionFragment;
    "add_item(string,string,string,uint256,uint256,uint256)": FunctionFragment;
    "disable_or_enable(uint256,bool)": FunctionFragment;
    "edit_item(uint256,string,string,string,uint256,uint256,uint256,bool)": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchase_item(uint256)": FunctionFragment;
    "remove_item(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "restock(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "user_points(address)": FunctionFragment;
    "user_purchases(address,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "SKU", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "add_item",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disable_or_enable",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "edit_item",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "items", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchase_item",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_item",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "user_points", values: [string]): string;
  encodeFunctionData(
    functionFragment: "user_purchases",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "SKU", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add_item", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disable_or_enable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "edit_item", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchase_item",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_item",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "restock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_points",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_purchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "itemAdded(uint256)": EventFragment;
    "itemDeleted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemDeleted"): EventFragment;
}

export class OnlineShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OnlineShopInterface;

  functions: {
    SKU(overrides?: CallOverrides): Promise<[BigNumber]>;

    add_item(
      name: string,
      image_url: string,
      description: string,
      stock: BigNumberish,
      price_eth: BigNumberish,
      points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disable_or_enable(
      sku: BigNumberish,
      mode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    edit_item(
      sku: BigNumberish,
      name: string,
      url: string,
      description: string,
      stock: BigNumberish,
      price_eth: BigNumberish,
      points: BigNumberish,
      mode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        name: string;
        image_url: string;
        description: string;
        inventory: BigNumber;
        price_eth: BigNumber;
        price_points: BigNumber;
        points_gained: BigNumber;
        enabled: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchase_item(
      sku: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remove_item(
      sku: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restock(
      sku: BigNumberish,
      new_stock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_points(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    user_purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SKU(overrides?: CallOverrides): Promise<BigNumber>;

  add_item(
    name: string,
    image_url: string,
    description: string,
    stock: BigNumberish,
    price_eth: BigNumberish,
    points: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disable_or_enable(
    sku: BigNumberish,
    mode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  edit_item(
    sku: BigNumberish,
    name: string,
    url: string,
    description: string,
    stock: BigNumberish,
    price_eth: BigNumberish,
    points: BigNumberish,
    mode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  items(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      name: string;
      image_url: string;
      description: string;
      inventory: BigNumber;
      price_eth: BigNumber;
      price_points: BigNumber;
      points_gained: BigNumber;
      enabled: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  purchase_item(
    sku: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remove_item(
    sku: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restock(
    sku: BigNumberish,
    new_stock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  user_purchases(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SKU(overrides?: CallOverrides): Promise<BigNumber>;

    add_item(
      name: string,
      image_url: string,
      description: string,
      stock: BigNumberish,
      price_eth: BigNumberish,
      points: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disable_or_enable(
      sku: BigNumberish,
      mode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    edit_item(
      sku: BigNumberish,
      name: string,
      url: string,
      description: string,
      stock: BigNumberish,
      price_eth: BigNumberish,
      points: BigNumberish,
      mode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        name: string;
        image_url: string;
        description: string;
        inventory: BigNumber;
        price_eth: BigNumber;
        price_points: BigNumber;
        points_gained: BigNumber;
        enabled: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    purchase_item(sku: BigNumberish, overrides?: CallOverrides): Promise<void>;

    remove_item(sku: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    restock(
      sku: BigNumberish,
      new_stock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    user_points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    user_purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    itemAdded(
      sku?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { sku: BigNumber }>;

    itemDeleted(
      sku?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { sku: BigNumber }>;
  };

  estimateGas: {
    SKU(overrides?: CallOverrides): Promise<BigNumber>;

    add_item(
      name: string,
      image_url: string,
      description: string,
      stock: BigNumberish,
      price_eth: BigNumberish,
      points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disable_or_enable(
      sku: BigNumberish,
      mode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    edit_item(
      sku: BigNumberish,
      name: string,
      url: string,
      description: string,
      stock: BigNumberish,
      price_eth: BigNumberish,
      points: BigNumberish,
      mode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    items(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchase_item(
      sku: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remove_item(
      sku: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restock(
      sku: BigNumberish,
      new_stock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    user_purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SKU(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add_item(
      name: string,
      image_url: string,
      description: string,
      stock: BigNumberish,
      price_eth: BigNumberish,
      points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disable_or_enable(
      sku: BigNumberish,
      mode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    edit_item(
      sku: BigNumberish,
      name: string,
      url: string,
      description: string,
      stock: BigNumberish,
      price_eth: BigNumberish,
      points: BigNumberish,
      mode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase_item(
      sku: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remove_item(
      sku: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restock(
      sku: BigNumberish,
      new_stock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_points(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_purchases(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
